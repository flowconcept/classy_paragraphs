<?php

/**
 * @file
 * Main module file for Classy Paragraphs.
 */

// Paragraphs entity bundle.
define('CLASSY_PARAGRAPHS_ENTITY_TYPE', 'paragraphs_item');
// Full content view mode machine name.
define('CLASSY_PARAGRAPHS_VIEW_MODE', 'full');
// Field type classy paragraphs list.
define('CLASSY_PARAGRAPHS_FIELD_TYPE_LIST', 'classy_paragraphs');

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Get list of options from other modules.
 *
 */
function classy_paragraphs_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  $allowed_values = &drupal_static(__FUNCTION__, array());

  $cache_keys = array($definition->getTargetEntityTypeId(), $definition->getName());
  if ($entity) {
    $cache_keys = array_merge($cache_keys, array($entity->bundle(), $entity->language()->getId()));
  }
  $cache_id = implode(':', $cache_keys);

  if (!isset($allowed_values[$cache_id])) {
    // Invoke hook_classy_paragraphs_options
    $values = Drupal::moduleHandler()->invokeAll('classy_paragraphs_options', array($definition, $entity));

    // Let the themes play too, because classes for paragraphs is quite a themey thing.
    $theme_handler = Drupal::service('theme_handler');
    /* @var $theme_handler Drupal\Core\Extension\ThemeHandlerInterface */
    $default_theme = $theme_handler->getDefault();
    $themes = array_keys($theme_handler->getBaseThemes($theme_handler->listInfo(), $default_theme));
    $themes[] = $default_theme;
    foreach ($themes as $theme_name) {
      $function = $theme_name . '_classy_paragraphs_options';
      $theme_handler->getTheme($theme_name)->load();
      if (function_exists($function)) {
        $values = $function($definition, $entity);
      }
    }

    Drupal::moduleHandler()->alter('classy_paragraphs_options', $values, $definition, $entity);
    classy_paragraphs_sort_options($values);
    $allowed_values[$cache_id] = $values;
    return $values;
  }

  return $allowed_values[$cache_id];
}

/**
 * Recursively sort option values, including optgroup labels.
 */
function classy_paragraphs_sort_options(&$options) {
  uksort($options, function($a, $b) use ($options) {
    // If the option value is an array (i.e., it is an optgroup), sort by
    // the key (the group label). Otherwise sort by option value.
    if (!is_array($options[$a])) {
      $a = $options[$a];
    }
    if (!is_array($options[$b])) {
      $b = $options[$b];
    }
    return strcasecmp($a, $b);
  });

  // Sort optgroups.
  foreach ($options as &$value) {
    if (is_array($value)) {
      classy_paragraphs_sort_options($value);
    }
  }
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * The 'classy_paragraphs' field type does not implement widgets of its own, but reuses the
 * widget defined in options.module.
 *
 */
function classy_paragraphs_field_widget_info_alter(&$info) {
  $info['options_select']['field_types'][] = 'classy_paragraphs';
  $info['options_buttons']['field_types'][] = 'classy_paragraphs';
}

/**
 * Prepares variables for paragraph templates.
 *
 * Default template: paragraph.html.twig.
 *
 * Most themes use their own copy of paragraph.html.twig. The default is located
 * inside "templates/paragraph.html.twig". Look in there for the
 * full list of variables.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function classy_paragraphs_preprocess_paragraph(&$variables) {
  $classes = classy_paragraphs_get_classes($variables['paragraph']);
  foreach ($classes as $class) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
  }
}

/**
 * Get class names from paragraph item.
 *
 * @param Paragraph $paragraph
 * @return array
 */
function classy_paragraphs_get_classes(Paragraph $paragraph) {
  $classes = array();
  $field_definitions = $paragraph->getFieldDefinitions();
  $instances = field_entity_bundle_field_info($paragraph->getEntityType(), $paragraph->getType(), $field_definitions);

  foreach ($instances as $instance) {
    if ($instance->getType() == 'classy_paragraphs') {
      $field_name = $instance->getName();
      $items = $paragraph->get($field_name)->getValue();
      foreach ($items as $item) {
        $classes[] = $item['value'];
      }
    }
  }
  return $classes;
}
